<?php
/*
 * This file is part of the Symfony MakerBundle package.
 *
 * (c) Fabien Potencier <fabien@symfony.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace App\Topnode\BaseBundle\Maker;

use Doctrine\Bundle\DoctrineBundle\DoctrineBundle;
use Doctrine\Common\Inflector\Inflector;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\ParamConverter;
use Symfony\Bundle\MakerBundle\ConsoleStyle;
use Symfony\Bundle\MakerBundle\DependencyBuilder;
use Symfony\Bundle\MakerBundle\Doctrine\DoctrineHelper;
use Symfony\Bundle\MakerBundle\Exception\RuntimeCommandException;
use Symfony\Bundle\MakerBundle\FileManager;
use Symfony\Bundle\MakerBundle\Generator;
use Symfony\Bundle\MakerBundle\InputConfiguration;
use Symfony\Bundle\MakerBundle\Maker\AbstractMaker;
use Symfony\Bundle\MakerBundle\MakerInterface;
use Symfony\Bundle\MakerBundle\Renderer\FormTypeRenderer;
use Symfony\Bundle\MakerBundle\Str;
use Symfony\Bundle\MakerBundle\Util\ClassNameDetails;
use Symfony\Bundle\MakerBundle\Validator;
use Symfony\Bundle\TwigBundle\TwigBundle;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Question\Question;
use Symfony\Component\Filesystem\Filesystem;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\Security\Csrf\CsrfTokenManager;
use Symfony\Component\Validator\Validation;
use Symfony\Component\Yaml\Yaml;

class MakeTopCrud extends AbstractMaker implements MakerInterface
{
    /**
     * Identifies a many-to-one association with doctrine.
     */
    protected const MANY_TO_ONE = 2;

    /**
     * Identifies a one-to-many association with doctrine.
     */
    protected const ONE_TO_MANY = 4;

    /**
     * Identifies a many-to-many association with doctrine.
     */
    protected const MANY_TO_MANY = 8;

    /**
     * List of CRUD default fields.
     */
    protected const CRUD_FIELDS = ['id', 'isActive', 'createdAt', 'updatedAt', 'deletedAt'];
    /**
     * Set a minlength rule to text fields in form type.
     */
    protected const MIN_LENGTH_TEXT = 3;

    /**
     * Set a maxlength rule to text fields in form type.
     */
    protected const MAX_LENGTH_TEXT = 300;

    private $doctrineHelper;
    private $formTypeRenderer;
    private $fileManager;

    public function __construct(DoctrineHelper $doctrineHelper, FormTypeRenderer $formTypeRenderer, FileManager $fileManager)
    {
        $this->doctrineHelper = $doctrineHelper;
        $this->formTypeRenderer = $formTypeRenderer;
        $this->fileManager = $fileManager;
        $this->fileSystem = new Filesystem();
    }

    public static function getCommandName(): string
    {
        return 'make:top-crud';
    }

    /**
     * {@inheritdoc}
     */
    public function configureCommand(Command $command, InputConfiguration $inputConfig)
    {
        $command
            ->setDescription('Creates TOP CRUD for Doctrine entity class')
            ->addArgument('entity-class', InputArgument::OPTIONAL, sprintf('The class name of the entity to create CRUD (e.g. <fg=yellow>%s</>)', Str::asClassName(Str::getRandomTerm())))
            ->addArgument('entity-namespace-folder', InputArgument::OPTIONAL, sprintf('The folder inside of src/Controller were the comand file will be created (e.g. <fg=yellow>%s</>) blank for root folder', 'Admin'))
            ->addArgument('entity-translation', InputArgument::OPTIONAL, sprintf('The translation domain of the entity to create CRUD (e.g. <fg=yellow>%s</>)', 'app.admin.' . Str::asSnakeCase(Str::getRandomTerm()) . '.'))
            ->addArgument('menu-item-label', InputArgument::OPTIONAL, sprintf('The menu item label (as a human would read)'))
            ->addArgument('entity-search-fields', InputArgument::OPTIONAL, sprintf('The atributes that will be used in search comma separated (e.g. <fg=yellow>%s</>)', 'name,description'))
            ->addArgument('entity-inflector-singular', InputArgument::OPTIONAL, sprintf('The translation of entity name on singular (e.g. <fg=yellow>%s</>)', 'usuário'))
            ->addArgument('entity-inflector-plural', InputArgument::OPTIONAL, sprintf('The translation of entity name on plural form (e.g. <fg=yellow>%s</>)', 'usuários'))
            ->addArgument('entity-inflector-gender', InputArgument::OPTIONAL, sprintf('The gender of entity name on translation (options <fg=yellow>%s</>)', '"a" or "o"'))
            ->addArgument('entity-actions-available', InputArgument::OPTIONAL, sprintf('The actions available on class (list action will be generated by default)'))
            ->addArgument('entity-list-available', InputArgument::OPTIONAL, sprintf('The fields to display on list action'))
            ->addArgument('entity-fields', InputArgument::OPTIONAL, sprintf('All entity fields'))
        ;

        $inputConfig->setArgumentAsNonInteractive('entity-class');
        $inputConfig->setArgumentAsNonInteractive('entity-namespace-folder');
        $inputConfig->setArgumentAsNonInteractive('entity-translation');
        $inputConfig->setArgumentAsNonInteractive('menu-item-label');
        $inputConfig->setArgumentAsNonInteractive('entity-search-fields');
        $inputConfig->setArgumentAsNonInteractive('entity-inflector-singular');
        $inputConfig->setArgumentAsNonInteractive('entity-inflector-plural');
        $inputConfig->setArgumentAsNonInteractive('entity-inflector-gender');
        $inputConfig->setArgumentAsNonInteractive('entity-actions-available');
        $inputConfig->setArgumentAsNonInteractive('entity-list-available');
        $inputConfig->setArgumentAsNonInteractive('entity-fields');
    }

    public function interact(InputInterface $input, ConsoleStyle $io, Command $command)
    {
        if (null === $input->getArgument('entity-class')) {
            $argument = $command->getDefinition()->getArgument('entity-class');
            $entities = $this->doctrineHelper->getEntitiesForAutocomplete();
            $question = new Question($argument->getDescription());
            $question->setAutocompleterValues($entities);
            $question->setValidator(
                function ($answer) {
                    Validator::notBlank($answer);

                    return Validator::entityExists($answer, $this->doctrineHelper->getEntitiesForAutocomplete());
                }
            );
            $value = $io->askQuestion($question);

            $input->setArgument('entity-class', $value);
        }

        if (null === $input->getArgument('entity-namespace-folder')) {
            $argument = $command->getDefinition()->getArgument('entity-namespace-folder');
            $entities = $this->doctrineHelper->getEntitiesForAutocomplete();
            $question = new Question($argument->getDescription(), '');
            $question->setNormalizer(function ($value) {
                $value = trim($value);
                $value = ucfirst($value);

                return $value;
            });
            $value = $io->askQuestion($question);

            $input->setArgument('entity-namespace-folder', $value);
        }

        if (null === $input->getArgument('menu-item-label')) {
            $message = 'The menu item label (as a human would read)';
            $default = $input->getArgument('entity-class');
            $message = sprintf($message, $default);

            $question = new Question($message, $default);
            $question->setValidator(
                function ($answer) {
                    return Validator::notBlank($answer);
                }
            );

            $value = $io->askQuestion($question, $default);
            $input->setArgument('menu-item-label', $value);
        }

        if (null === $input->getArgument('entity-actions-available')) {
            $default = 'new,edit,delete,duplicate';
            $message = 'The actions available on class (list action will be generated by default)(options <fg=yellow>%s</>)';
            $message = sprintf($message, $default);

            $question = new Question($message, $default);

            $value = $io->askQuestion($question, $default);
            $input->setArgument('entity-actions-available', $value);
        }

        if (null === $input->getArgument('entity-translation')) {
            $message = 'The translation domain of the entity to create CRUD (e.g. <fg=yellow>%s</>)';
            if (empty($input->getArgument('entity-namespace-folder'))) {
                $default = 'app.admin.' . Str::asSnakeCase($input->getArgument('entity-class')) . '.';
            } else {
                $default = 'app.' . Str::asSnakeCase($input->getArgument('entity-namespace-folder')) . '.' . Str::asSnakeCase($input->getArgument('entity-class')) . '.';
            }
            $message = sprintf($message, $default);

            $question = new Question($message, $default);
            $question->setNormalizer(function ($value) {
                $value = trim($value);
                $length = strlen($value);
                if ('.' !== substr($value, -1)) {
                    $value = $value . '.';
                }

                return $value;
            });

            $question->setValidator(
                function ($answer) {
                    if (4 != count(explode('.', $answer))) {
                        throw new RuntimeCommandException('the string must be a 3 level path');
                    }

                    return Validator::notBlank($answer);
                }
            );

            $value = $io->askQuestion($question, $default);
            $input->setArgument('entity-translation', $value);
        }

        $fullName = 'App\\Entity\\' . $input->getArgument('entity-class');
        $entityDoctrineDetails = $this->doctrineHelper->createDoctrineDetails($fullName);
        $associationMappings = $this->doctrineHelper->getMetadata($fullName)->getAssociationMappings();

        if (null === $input->getArgument('entity-search-fields')) {
            $argument = $command->getDefinition()->getArgument('entity-search-fields');
            $class = 'App\\Entity\\' . $input->getArgument('entity-class');

            $attributes = array_keys((array) new $class());

            $fields = [];
            foreach ($entityDoctrineDetails->getDisplayFields() as $attr) {
                $fields[] = $attr['fieldName'];
            }

            $question = new Question($argument->getDescription(), implode(',', $fields));

            $question->setNormalizer(function ($value) {
                $value = trim($value);
                $searchFields = explode(',', $value);
                $searchFields = array_map('trim', $searchFields);

                return $searchFields;
            });

            $question->setValidator(
                function ($answer) use ($input) {
                    $entityMetadata = $this->doctrineHelper->getMetadata('App\\Entity\\' . $input->getArgument('entity-class'));
                    $mappings = array_merge($entityMetadata->fieldMappings, $entityMetadata->associationMappings);
                    $mappings = array_keys($mappings);

                    foreach ($answer as $value) {
                        if (!in_array($value, $mappings)) {
                            throw new RuntimeCommandException('There is no field ' . $value . ' in ' . $input->getArgument('entity-class'));
                        }
                    }

                    return $answer;
                }
            );

            $value = $io->askQuestion($question);
            $input->setArgument('entity-search-fields', $value);
        }

        if (null === $input->getArgument('entity-list-available')) {
            $argument = $command->getDefinition()->getArgument('entity-list-available');

            $class = 'App\\Entity\\' . $input->getArgument('entity-class');

            $attributes = array_keys((array) new $class());

            $listFields = $this->getEntityFields($entityDoctrineDetails, $associationMappings);
            $listFields = $this->getChoiceLabel($listFields, $io);

            $input->setArgument('entity-fields', $listFields);

            $allFields = $io->choice('Implements all fields to list?', [
                0 => 'no',
                1 => 'yes',
                2 => 'yes, except CRUD fields (id, isActive, createdAt, updatedAt, deletedAt)',
            ]);

            if ('yes' === $allFields) {
                $fields = $listFields;
            } elseif ('no' === $allFields) {
                $question = new Question($argument->getDescription(), implode(',', array_keys($listFields)));

                $question->setNormalizer(function ($value) {
                    $value = trim($value);
                    $allowedFields = explode(',', $value);
                    $allowedFields = array_map('trim', $allowedFields);

                    return $allowedFields;
                });

                $question->setValidator(
                    function ($answer) use ($input) {
                        $entityMetadata = $this->doctrineHelper->getMetadata('App\\Entity\\' . $input->getArgument('entity-class'));
                        $mappings = array_merge($entityMetadata->fieldMappings, $entityMetadata->associationMappings);
                        $mappings = array_keys($mappings);

                        foreach ($answer as $value) {
                            if (!in_array($value, $mappings)) {
                                throw new RuntimeCommandException('There is no field ' . $value . ' in ' . $input->getArgument('entity-class'));
                            }
                        }

                        return $answer;
                    }
                );

                $value = $io->askQuestion($question);

                foreach (array_diff(array_keys($listFields), $value) as $unsetField) {
                    unset($listFields[$unsetField]);
                    $fields = $listFields;
                }
            } else {
                $fields = $this->removeCrudFieldsFromArray($listFields);
            }

            $input->setArgument('entity-list-available', $fields);
        }

        if (null === $input->getArgument('entity-inflector-singular')) {
            $argument = $command->getDefinition()->getArgument('entity-inflector-singular');
            $question = new Question($argument->getDescription(), Str::asSnakeCase($input->getArgument('entity-class')));

            $question->setValidator(
                function ($answer) {
                    return Validator::notBlank($answer);
                }
            );
            $value = $io->askQuestion($question);
            $input->setArgument('entity-inflector-singular', $value);
        }

        if (null === $input->getArgument('entity-inflector-plural')) {
            $argument = $command->getDefinition()->getArgument('entity-inflector-plural');
            $question = new Question($argument->getDescription(), Str::asSnakeCase($input->getArgument('entity-class')) . 's');

            $question->setValidator(
                function ($answer) {
                    return Validator::notBlank($answer);
                }
            );
            $value = $io->askQuestion($question);
            $input->setArgument('entity-inflector-plural', $value);
        }

        if (null === $input->getArgument('entity-inflector-gender')) {
            $argument = $command->getDefinition()->getArgument('entity-inflector-gender');
            $value = $io->choice($argument->getDescription(), ['a', 'o']);
            $input->setArgument('entity-inflector-gender', $value);
        }
    }

    public function generate(InputInterface $input, ConsoleStyle $io, Generator $generator)
    {
        $entityClassDetails = $generator->createClassNameDetails(
            Validator::entityExists($input->getArgument('entity-class'), $this->doctrineHelper->getEntitiesForAutocomplete()),
            'Entity\\'
        );

        $namespacePrefix = $input->getArgument('entity-namespace-folder');

        $translationDomain = Validator::notBlank($input->getArgument('entity-translation'));
        $translationDomain = trim($translationDomain);

        if ('.' !== substr($translationDomain, -1)) {
            $translationDomain = $translationDomain . '.';
        }

        if (4 != count(explode('.', $translationDomain))) {
            throw new RuntimeCommandException('the string must be a 3 level path');
        }

        $searchFields = $input->getArgument('entity-search-fields');
        if (!is_array($searchFields)) {
            $searchFields = $this->normalizeSearchFields($searchFields);
        }
        $this->validateSearchFields($searchFields, $entityClassDetails->getFullName());

        $entityInflex['singular'] = Validator::notBlank($input->getArgument('entity-inflector-singular'));
        $entityInflex['plural'] = Validator::notBlank($input->getArgument('entity-inflector-plural'));
        $entityInflex['gender'] = strtolower(Validator::notBlank($input->getArgument('entity-inflector-gender')));
        $entityInflex['fields-to-list'] = $input->getArgument('entity-list-available');
        $entityInflex['all-fields'] = $input->getArgument('entity-fields');
        $entityInflex['menu-item-label'] = Validator::notBlank($input->getArgument('menu-item-label'));

        if ('a' != $entityInflex['gender'] && 'o' != $entityInflex['gender']) {
            throw new \InvalidArgumentException('invalid gender option');
        }

        $entityDoctrineDetails = $this->doctrineHelper->createDoctrineDetails($entityClassDetails->getFullName());
        $entityMetadata = $this->doctrineHelper->getMetadata($entityClassDetails->getFullName());

        $repositoryVars = [];
        if (null !== $entityDoctrineDetails->getRepositoryClass()) {
            $repositoryClassDetails = $generator->createClassNameDetails(
                '\\' . $entityDoctrineDetails->getRepositoryClass(),
                'Repository\\',
                'Repository'
            );
            $repositoryVars = [
                'repository_full_class_name' => $repositoryClassDetails->getFullName(),
                'repository_class_name' => $repositoryClassDetails->getShortName(),
                'repository_var' => lcfirst(Inflector::singularize($repositoryClassDetails->getShortName())),
            ];
        }
        if (empty($namespacePrefix)) {
            $controllerClassDetails = $generator->createClassNameDetails(
                $entityClassDetails->getRelativeNameWithoutSuffix() . 'Controller',
                'Controller\\',
                'Controller'
            );
        } else {
            $controllerClassDetails = $generator->createClassNameDetails(
                $entityClassDetails->getRelativeNameWithoutSuffix() . 'Controller',
                'Controller\\' . $namespacePrefix . '\\',
                'Controller'
            );
        }

        if (empty($namespacePrefix)) {
            $formClassDetails = $generator->createClassNameDetails(
                $entityClassDetails->getRelativeNameWithoutSuffix() . 'Type',
                'Form\\',
                'Type'
            );
        } else {
            $formClassDetails = $generator->createClassNameDetails(
                $entityClassDetails->getRelativeNameWithoutSuffix() . 'Type',
                'Form\\' . $namespacePrefix . '\\',
                'Type'
            );
        }

        if (empty($namespacePrefix)) {
            $formFilterClassDetails = $generator->createClassNameDetails(
                $entityClassDetails->getRelativeNameWithoutSuffix() . 'FilterType',
                'Form\\',
                'Type'
            );
        } else {
            $formFilterClassDetails = $generator->createClassNameDetails(
                $entityClassDetails->getRelativeNameWithoutSuffix() . 'FilterType',
                'Form\\' . $namespacePrefix . '\\',
                'Type'
            );
        }

        $targetPath = $this->fileManager->getRelativePathForFutureClass($controllerClassDetails->getFullName());
        if ($this->fileManager->fileExists($targetPath)) {
            $answer = $io->confirm('controller already exists, regenerate ?', false);

            if (!$answer) {
                throw new RuntimeCommandException(sprintf('The file "%s" can\'t be generated because it already exists.', $this->fileManager->relativizePath($targetPath)));
            }

            unlink($this->fileManager->absolutizePath($targetPath));

            if (class_exists($formFilterClassDetails->getFullName())) {
                $targetPath = $this->fileManager->getRelativePathForFutureClass($formFilterClassDetails->getFullName());
                unlink($this->fileManager->absolutizePath($targetPath));
            }

            if (class_exists($formClassDetails->getFullName())) {
                $targetPath = $this->fileManager->getRelativePathForFutureClass($formClassDetails->getFullName());
                unlink($this->fileManager->absolutizePath($targetPath));
            }
        }

        $entityVarPlural = lcfirst(Inflector::pluralize($entityClassDetails->getShortName()));
        $entityVarSingular = lcfirst(Inflector::singularize($entityClassDetails->getShortName()));
        if (empty($namespacePrefix)) {
            $routeName = 'crud_' . Str::asRouteName($controllerClassDetails->getRelativeNameWithoutSuffix());
        } else {
            $routeName = 'crud_' . Str::asRouteName($namespacePrefix) . '_' . Str::asRouteName($controllerClassDetails->getRelativeNameWithoutSuffix());
        }

        if (empty($namespacePrefix)) {
            $routePath = Str::asRoutePath($controllerClassDetails->getRelativeNameWithoutSuffix());
        } else {
            $routePath = Str::asRoutePath($namespacePrefix) . Str::asRoutePath($controllerClassDetails->getRelativeNameWithoutSuffix());
        }

        $templatesPath = Str::asFilePath($controllerClassDetails->getRelativeNameWithoutSuffix());

        $generator->generateController(
            $controllerClassDetails->getFullName(),
            __DIR__ . '/../Resources/skeleton/AbstractCrudController.tpl.php',
            array_merge(
                [
                    'entity_full_class_name' => $entityClassDetails->getFullName(),
                    'entity_class_name' => $entityClassDetails->getShortName(),
                    'form_full_class_name' => $formClassDetails->getFullName(),
                    'form_filter_full_class_name' => $formFilterClassDetails->getFullName(),
                    'form_class_name' => $formClassDetails->getShortName(),
                    'route_path' => $routePath,
                    'route_name' => $routeName,
                    'entity_translation_domain' => $translationDomain,
                    'entity_default_search_fields' => $searchFields,
                ],
                $repositoryVars
            )
        );

        $this->renderForm(
            $formClassDetails,
            $entityInflex['all-fields'],
            $translationDomain,
            $generator,
            $entityClassDetails
        );

        $this->renderFormFilter(
            $formFilterClassDetails,
            ['search' => null],
            $translationDomain,
            $generator,
            $entityClassDetails
        );

        $this->generateBreadcrumb($routeName, $translationDomain, $generator, $input);
        $this->generateSortable($routeName, $translationDomain, $generator, $entityClassDetails->getFullName(), $entityInflex['fields-to-list']);
        $this->generateMessages($translationDomain, $generator, $entityClassDetails, $entityInflex);
        $this->generateMenuItem($routeName, $translationDomain, $generator);
        $generator->writeChanges();

        $this->writeSuccessMessage($io);
        $routeList = ('' != $namespacePrefix ? Str::asRoutePath($namespacePrefix) : '') . Str::asRoutePath($controllerClassDetails->getRelativeNameWithoutSuffix()) . '/list';

        $io->text(sprintf('Next: Check your new CRUD by going to <fg=yellow>%s/</>', $routeList));
    }

    /**
     * {@inheritdoc}
     */
    public function configureDependencies(DependencyBuilder $dependencies)
    {
        $dependencies->addClassDependency(
            Route::class,
            'router'
        );
        $dependencies->addClassDependency(
            AbstractType::class,
            'form'
        );
        $dependencies->addClassDependency(
            Validation::class,
            'validator'
        );
        $dependencies->addClassDependency(
            TwigBundle::class,
            'twig-bundle'
        );
        $dependencies->addClassDependency(
            DoctrineBundle::class,
            'orm-pack'
        );
        $dependencies->addClassDependency(
            CsrfTokenManager::class,
            'security-csrf'
        );
        $dependencies->addClassDependency(
            ParamConverter::class,
            'annotations'
        );
    }

    private function getEntityFields($entityDoctrineDetails, $associationMappings, $getCrudFields = true, $getRelationshipFields = true): array
    {
        $standardFields = $entityDoctrineDetails->getDisplayFields();
        $fieldsToshow = $standardFields;

        if ($getRelationshipFields) {
            $relationshipFields = $associationMappings;

            foreach ($relationshipFields as $name => $attrs) {
                $fieldsToshow = array_merge($fieldsToshow, [
                    $name => [
                        'fieldName' => $attrs['fieldName'],
                        'type' => $attrs['type'],
                        // TODO: Obter o nome correto do campo na relação
                        'joinColumns' => $attrs['joinColumns'] ?? false,
                        'columnName' => $attrs['fieldName'] . '_id',
                        'targetEntity' => $attrs['targetEntity'],
                    ],
                ]);
            }
        }

        if (!$getCrudFields) {
            foreach ($fieldsToshow as $fieldName => $data) {
                if (in_array($fieldName, self::CRUD_FIELDS)) {
                    unset($fieldsToshow[$fieldName]);
                }
            }
        }

        return $fieldsToshow;
    }

    private function getChoiceLabel($fields, $io)
    {
        foreach ($fields as $key => $field) {
            if (self::MANY_TO_ONE === $field['type']) {
                $entityDoctrineDetails = $this->doctrineHelper->createDoctrineDetails($field['targetEntity']);
                $associationFields = $entityDoctrineDetails->getDisplayFields();

                $question = new Question('Select a choice label for ' . $field['fieldName'] . ' (' . implode(',', array_keys($associationFields)) . ')');

                $question->setValidator(
                    function ($answer) use ($associationFields, $field) {
                        Validator::notBlank($answer);

                        if (!in_array($answer, array_keys($associationFields))) {
                            throw new RuntimeCommandException('There is no field ' . $answer . ' in ' . $field['targetEntity']);
                        }

                        if (in_array($associationFields[$answer]['type'], ['date', 'datetime', 'time'])) {
                            throw new RuntimeCommandException('Date or Time fields are not allowed');
                        }

                        return $answer;
                    }
                );

                $fields[$key]['choiceLabel'] = $io->askQuestion($question);
            }
        }

        return $fields;
    }

    private function generateBreadcrumb($routeName, $translationDomain, $generator, $input)
    {
        $breadcrumbFile = __DIR__ . '/../../../../config/topnode/breadcrumb.yml';
        $data = Yaml::parse(file_get_contents($breadcrumbFile));

        $data[$routeName . '_list'] = [
            'name' => $translationDomain . 'title',
            'form' => $routeName . '_form_generate',
            'crud' => [],
            'crud_helpers' => [
                'reactivate' => $routeName . '_reactivate',
            ],
        ];

        $data[$routeName . '_form_generate'] = ['parent' => $routeName . '_list'];
        $data[$routeName . '_reactivate'] = ['parent' => $routeName . '_list'];

        $actionsArgument = preg_replace('/\s/', '', $input->getArgument('entity-actions-available'));
        $actions = explode(',', $actionsArgument);

        foreach ($actions as $action) {
            $data[$routeName . '_' . $action] = ['parent' => $routeName . '_list'];
            $data[$routeName . '_list']['crud'][$action] = $routeName . '_' . $action;
        }

        $generator->dumpFile($breadcrumbFile, Yaml::dump($data, 6));
    }

    private function generateSortable($routeName, $translationDomain, $generator, $fullName, $allowedFields)
    {
        $entityDoctrineDetails = $this->doctrineHelper->createDoctrineDetails($fullName);
        $associationMappings = $this->doctrineHelper->getMetadata($fullName)->getAssociationMappings();

        // TODO: Criar constantes de caminhos
        $sortableFile = __DIR__ . '/../../../../config/topnode/sortable.yml';

        if (!$this->fileSystem->exists($sortableFile)) {
            $this->fileSystem->touch($sortableFile);
        }

        $data = Yaml::parse(file_get_contents($sortableFile));

        foreach ($allowedFields as $field => $value) {
            if (isset($associationMappings[$field])) {
                if (
                    MakeTopCrud::MANY_TO_ONE == $associationMappings[$field]['type']
                    || MakeTopCrud::MANY_TO_MANY == $associationMappings[$field]['type']
                ) {
                    // $data[$routeName.'_list'][$field]['database_name'] = $associationMappings[$field]['fieldName'].'.id';
                    // $data[$routeName.'_list'][$field]['field'] = Str::asLowerCamelCase($associationMappings[$field]['fieldName']);
                    // $data[$routeName.'_list'][$field]['display_name'] = $translationDomain.'form.fields.'.Str::asSnakeCase($associationMappings[$field]['fieldName']);
                    // $data[$routeName.'_list'][$field]['is_sortable'] = true;
                    // $data[$routeName.'_list'][$field]['is_main'] = false;
                    // $data[$routeName.'_list'][$field]['label'] = $allowedFields[$field]['choiceLabel'];
                    // $data[$routeName.'_list'][$field]['join_class'] = $associationMappings[$field]['targetEntity'];
                }
            } else {
                $data[$routeName . '_list'][$field]['field'] = $allowedFields[$field]['fieldName'];
                $data[$routeName . '_list'][$field]['database_name'] = 'e.' . $allowedFields[$field]['fieldName'];
                $data[$routeName . '_list'][$field]['display_name'] = $translationDomain . 'form.fields.' . Str::asSnakeCase($allowedFields[$field]['fieldName']);
                $data[$routeName . '_list'][$field]['is_sortable'] = true;
                $data[$routeName . '_list'][$field]['is_main'] = false;
            }
        }

        $data[$routeName . '_new'] = ['inherit' => $routeName . '_list'];
        $data[$routeName . '_edit'] = ['inherit' => $routeName . '_list'];
        $data[$routeName . '_reactivate'] = ['inherit' => $routeName . '_list'];
        $data[$routeName . '_duplicate'] = ['inherit' => $routeName . '_list'];

        $generator->dumpFile($sortableFile, Yaml::dump($data, 6));
    }

    private function generateMessages($translationDomain, $generator, $entityClassDetails, $entityInflex)
    {
        $messagesDir = $this->fileManager->getRootDirectory() . '/translations/pt_BR';
        $messagesFile = $this->fileManager->getRootDirectory() . '/translations/pt_BR/messages.pt_BR.yml';

        $formFields = $entityInflex['all-fields'];

        if (!$this->fileSystem->exists($messagesDir)) {
            $this->fileSystem->mkdir($messagesDir);
        }
        if (!$this->fileSystem->exists($messagesFile)) {
            $this->fileSystem->touch($messagesFile);
        }

        $data = Yaml::parse(file_get_contents($messagesFile));

        $translationDomain = explode('.', $translationDomain);
        $classData = [];
        $classMessageIndex = $translationDomain[2];

        $classData['menu']['title'] = $entityInflex['menu-item-label'];
        $classData['title'] = 'Listagem de ' . strtolower($entityInflex['plural']);
        $classData['form']['success_new'] = ucfirst($entityInflex['singular']) . ' cadastrad' . $entityInflex['gender'] . ' com sucesso';
        $classData['form']['not_found'] = ucfirst($entityInflex['singular']) . ' não encontrad' . $entityInflex['gender'];
        $classData['form']['success_duplicate'] = ucfirst($entityInflex['singular']) . ' duplicad' . $entityInflex['gender'] . ' com sucesso';
        $classData['form']['validation_error'] = 'Dados inválidos';
        $classData['form']['success_edit'] = 'Alteração de ' . strtolower($entityInflex['singular']) . ' efetuada com sucesso';
        $classData['form']['form_error'] = 'Problemas no formulário';
        $classData['form']['generic_error'] = 'Um erro ocorreu';
        $classData['form']['title']['new'] = 'Cadastro de ' . strtolower($entityInflex['singular']);
        $classData['form']['title']['edit'] = 'Edição de ' . strtolower($entityInflex['singular']);
        $classData['form']['title']['duplicate'] = 'Duplicar ' . strtolower($entityInflex['singular']);
        $classData['form']['fields']['search'] = 'Buscar';

        foreach ($formFields as $field => $dataField) {
            $classData['form']['fields'][Str::asSnakeCase($field)] = '@_' . $field;
            $classData['form']['breadcrumb'][Str::asSnakeCase($field)] = '@_' . $field;

            if ('boolean' == $dataField['type']) {
                $classData['form']['fields'][Str::asSnakeCase($field) . '_choices'] = [
                    'true' => '@_yes',
                    'false' => '@_no',
                ];
            }
        }

        $classData['delete']['success'] = ucfirst($entityInflex['singular']) . ' removid' . $entityInflex['gender'] . ' com sucesso';
        $classData['delete']['success_reactivate'] = 'Clique aqui para desfazer a ação.';
        $classData['reactivate']['success'] = ucfirst($entityInflex['singular']) . ' reativad' . $entityInflex['gender'] . ' com sucesso.';
        $classData['reactivate']['error'] = 'Ocorreu um erro ao reativar ' . $entityInflex['gender'] . ' ' . $entityInflex['singular'];

        $data[$translationDomain[0]][$translationDomain[1]][$classMessageIndex] = $classData;

        $generator->dumpFile($messagesFile, Yaml::dump($data, 7));
    }

    private function generateMenuItem($routeName, $translationDomain, $generator)
    {
        $menuFile = __DIR__ . '/../../../../config/topnode/menu.yml';

        if (!$this->fileSystem->exists($menuFile)) {
            $this->fileSystem->touch($menuFile);
        }

        $data = Yaml::parse(file_get_contents($menuFile));

        $data['main']['items'][$routeName . '_list'] = [
            'title' => $translationDomain . 'menu.title',
            'route' => $routeName . '_list',
            'icon' => 'fa fa-bars',
            'roles' => ['ROLE_USER'],
        ];

        $generator->dumpFile($menuFile, Yaml::dump($data, 4));
    }

    private function renderFormFilter(ClassNameDetails $formClassDetails, array $formFields, $translationDomain, Generator $generator, ClassNameDetails $boundClassDetails = null, array $constraintClasses = [])
    {
        $fieldTypeUseStatements = [];
        $fields = [];
        foreach ($formFields as $name => $fieldTypeOptions) {
            $fieldTypeOptions ??= ['type' => null, 'options_code' => null];

            if (isset($fieldTypeOptions['type'])) {
                $fieldTypeUseStatements[] = $fieldTypeOptions['type'];
                $fieldTypeOptions['type'] = Str::getShortClassName($fieldTypeOptions['type']);
            }

            $fields[$name] = $fieldTypeOptions;
        }

        $generator->generateClass(
            $formClassDetails->getFullName(),
            __DIR__ . '/../Resources/skeleton/FilterType.tpl.php',
            [
                'bounded_full_class_name' => $boundClassDetails ? $boundClassDetails->getFullName() : null,
                'bounded_class_name' => $boundClassDetails ? $boundClassDetails->getShortName() : null,
                'form_fields' => $fields,
                'field_type_use_statements' => $fieldTypeUseStatements,
                'constraint_use_statements' => $constraintClasses,
                'translation_domain' => $translationDomain,
            ]
        );
    }

    private function renderForm(ClassNameDetails $formClassDetails, array $formFields, $translationDomain, Generator $generator, ClassNameDetails $boundClassDetails = null, array $constraintClasses = [])
    {
        $fieldTypeUseStatements = [];
        $fields = [];
        $fieldTypeUseStatements = [];
        $fieldUseEntities = [];
        $formFields = $this->removeCrudFieldsFromArray($formFields);

        foreach ($formFields as $field => $data) {
            $fields[$field] = [];
            $fieldType = $this->getFormTypeFromFieldType($data['type']);
            $fields[$field]['type'] = $fieldType['name'];
            $fieldTypeUseStatements[] = $fieldType['namespace'] . '\\' . $fieldType['name'];
            $fields[$field]['snakeCaseName'] = Str::asSnakeCase($field);

            if ('EntityType' == $fields[$field]['type']) {
                unset($fields[$field]);
                continue;
                if (
                    MakeTopCrud::MANY_TO_ONE == $data['type']
                    || MakeTopCrud::MANY_TO_MANY == $data['type']
                ) {
                    $targetName = explode('\\', $data['targetEntity']);
                    $targetName = $targetName[count($targetName) - 1];
                    $fieldUseEntities[] = $data['targetEntity'];
                    $fields[$field]['targetEntityName'] = $targetName;
                    if (MakeTopCrud::MANY_TO_ONE == $data['type']) {
                        $fields[$field]['relationType'] = 'manyToOne';
                    } else {
                        $fields[$field]['relationType'] = 'manyToMany';
                    }
                } else {
                    unset($fields[$field]);
                    continue;
                }
            }

            if (array_key_exists('type', $data)) {
                if ('boolean' == $data['type']) {
                    $fields[$field]['boolean'] = 'true';
                }
            }

            if (array_key_exists('nullable', $data)) {
                if (!$data['nullable']) {
                    $fields[$field]['required'] = 'true';
                }
            }

            if ('TextType' == $fields[$field]['type']) {
                $fields[$field]['maxlength'] = $this::MAX_LENGTH_TEXT;
                $fields[$field]['minlength'] = $this::MIN_LENGTH_TEXT;
            }

            if (array_key_exists('length', $data)) {
                $fields[$field]['maxlength'] = $data['length'];
                $fields[$field]['minlength'] = $this::MIN_LENGTH_TEXT;
            }

            if (array_key_exists('choiceLabel', $data) && $data['choiceLabel']) {
                $fields[$field]['choiceLabel'] = $data['choiceLabel'];
            }
            if (array_key_exists('joinColumns', $data)) {
                foreach ($data['joinColumns'] as $joinColumn) {
                    if (array_key_exists('nullable', $joinColumn) && !$joinColumn['nullable']) {
                        $fields[$field]['required'] = 'true';
                    }
                }
            }
        }

        $fieldTypeUseStatements = array_unique($fieldTypeUseStatements);
        $fieldUseEntities = array_unique($fieldUseEntities);

        $generator->generateClass(
            $formClassDetails->getFullName(),
            __DIR__ . '/../Resources/skeleton/Type.tpl.php',
            [
                'bounded_full_class_name' => $boundClassDetails ? $boundClassDetails->getFullName() : null,
                'bounded_class_name' => $boundClassDetails ? $boundClassDetails->getShortName() : null,
                'form_fields' => $fields,
                'field_type_use_statements' => $fieldTypeUseStatements,
                'constraint_use_statements' => $constraintClasses,
                'translation_domain' => $translationDomain,
                'field_use_entities' => $fieldUseEntities,
            ]
        );
    }

    private function getFormTypeFromFieldType($type)
    {
        switch ($type) {
            case 'string':
            case 'float':
            case 'decimal':
                return [
                        'name' => 'TextType',
                        'namespace' => 'Symfony\Component\Form\Extension\Core\Type',
                    ];
            break;
            case 'integer':
                return [
                    'name' => 'IntegerType',
                    'namespace' => 'Symfony\Component\Form\Extension\Core\Type',
                ];
            break;
            case 'text':
                return [
                    'name' => 'TextareaType',
                    'namespace' => 'Symfony\Component\Form\Extension\Core\Type',
                ];
            break;
            case 'datetime':
                return [
                    'name' => 'DateTimeType',
                    'namespace' => 'Symfony\Component\Form\Extension\Core\Type',
                ];
            break;
            case 'date':
                return [
                    'name' => 'DateType',
                    'namespace' => 'Symfony\Component\Form\Extension\Core\Type',
                ];
            break;
            case 'time':
                return [
                    'name' => 'TimeType',
                    'namespace' => 'Symfony\Component\Form\Extension\Core\Type',
                ];
            break;
            case 'boolean':
                return [
                    'name' => 'ChoiceType',
                    'namespace' => 'Symfony\Component\Form\Extension\Core\Type',
                ];
            break;
            default:
                return [
                    'name' => 'EntityType',
                    'namespace' => 'Symfony\Bridge\Doctrine\Form\Type',
                ];
            break;
        }
    }

    private function removeCrudFieldsFromArray($array)
    {
        return array_diff_key($array, array_flip(self::CRUD_FIELDS));
    }

    private function normalizeSearchFields($answer)
    {
        $answer = trim($answer);
        $searchFields = explode(',', $answer);
        $searchFields = array_map('trim', $searchFields);

        return $searchFields;
    }

    private function validateSearchFields($answer, $entityClassName)
    {
        $entityMetadata = $this->doctrineHelper->getMetadata($entityClassName);
        $mappings = array_merge($entityMetadata->fieldMappings, $entityMetadata->associationMappings);
        $mappings = array_keys($mappings);

        foreach ($answer as $value) {
            if (!in_array($value, $mappings)) {
                throw new RuntimeCommandException('There is no field ' . $value . ' in ' . $entityClassName);
            }
        }
    }
}
